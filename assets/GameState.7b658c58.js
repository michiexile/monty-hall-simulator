import{a as r,_ as n}from"./index.81160f9d.js";const g={dark:{type:Boolean,default:null}};function m(t,e){return r(()=>t.dark===null?e.dark.isActive:t.dark)}var s=(t=>(t[t.Left=1]="Left",t[t.Middle=2]="Middle",t[t.Right=3]="Right",t))(s||{});const a=Object.keys(s).map(t=>Number.parseInt(t)).filter(t=>!Number.isNaN(t));function o(t){return Array.from(t)[Math.floor(Math.random()*t.length)]}var i=(t=>(t[t.selectDoor=0]="selectDoor",t[t.swapOrStay=1]="swapOrStay",t[t.result=2]="result",t))(i||{});const l=n("game",{state:()=>({gameState:{gamePhase:0,winningDoor:null,chosenDoor:null,finalDoor:null,openDoors:[]},gameStats:{totalCount:0,win:0,swapWin:0,stayWin:0}}),actions:{setupGame(){this.gameState.gamePhase=0,this.gameState.winningDoor=o(a),this.gameState.chosenDoor=null,this.gameState.finalDoor=null,this.gameState.openDoors=[]},chooseDoor(t){if(this.gameState.gamePhase!=0){console.log("Can only chooseDoor in the first game phase");return}if(this.gameState.winningDoor===null)throw Error("Started game without a winning door");this.gameState.chosenDoor=t;const e=new Set(a);e.delete(t),e.delete(this.gameState.winningDoor),this.gameState.openDoors.push(o(Array.from(e.values()))),this.gameState.gamePhase=1},swap(){if(this.gameState.gamePhase!=1)throw Error("Can only swap in the second game phase");const t=new Set(a);if(this.gameState.chosenDoor&&t.delete(this.gameState.chosenDoor),this.gameState.openDoors.forEach(e=>t.delete(e)),t.size>1)throw Error("Too many doors to choose from in swap");this.gameState.finalDoor=Array.from(t.values())[0],this.score()},stay(){if(this.gameState.gamePhase!=1)throw Error("Can only stay in the second game phase");this.gameState.finalDoor=this.gameState.chosenDoor,this.score()},score(){if(this.gameState.gamePhase!=1)throw Error("Can only score after finishing either swap or stay");if(this.gameState.finalDoor==null)throw Error("Must have chosen a final door before scoring");this.gameStats.totalCount++,this.gameState.finalDoor==this.gameState.winningDoor&&this.gameStats.win++,this.gameState.chosenDoor==this.gameState.winningDoor?this.gameStats.stayWin++:this.gameStats.swapWin++,this.gameState.openDoors=[...a],this.gameState.gamePhase=2}}});export{s as D,i as G,m as a,l as b,a as d,g as u};
